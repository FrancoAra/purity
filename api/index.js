Index.PACKAGES = {"purity" : [{"name" : "purity.ConsistentParse", "shortDescription" : "", "object" : "purity\/ConsistentParse$.html", "members_object" : [{"label" : "stdMonadErrorForConsistent", "tail" : "(): Monad[[γ$0$]ConsistentParse[E, A, γ$0$]]", "member" : "purity.ConsistentInstances.stdMonadErrorForConsistent", "link" : "purity\/ConsistentParse$.html#stdMonadErrorForConsistent[E,A]:cats.Monad[[γ$0$]purity.ConsistentParse[E,A,γ$0$]]", "kind" : "implicit def"}, {"label" : "unsound", "tail" : "(e: E): ConsistentParse[E, A, A]", "member" : "purity.ConsistentFunctions.unsound", "link" : "purity\/ConsistentParse$.html#unsound[E,A](e:E):purity.ConsistentParse[E,A,A]", "kind" : "def"}, {"label" : "sound", "tail" : "(f: (A) ⇒ ValidatedNel[E, B]): ConsistentParse[E, A, B]", "member" : "purity.ConsistentFunctions.sound", "link" : "purity\/ConsistentParse$.html#sound[E,A,B](f:A=>cats.data.ValidatedNel[E,B]):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "parse", "tail" : "(Proposition: Proposition[E, B])(f: (A) ⇒ ValidatedNel[E, B]): ConsistentParse[E, A, B]", "member" : "purity.ConsistentFunctions.parse", "link" : "purity\/ConsistentParse$.html#parse[E,A,B](Proposition:purity.Proposition[E,B])(f:A=>cats.data.ValidatedNel[E,B]):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "ask", "tail" : "(): ConsistentParse[E, A, A]", "member" : "purity.ConsistentFunctions.ask", "link" : "purity\/ConsistentParse$.html#ask[E,A]:purity.ConsistentParse[E,A,A]", "kind" : "def"}, {"label" : "pure", "tail" : "(b: B): ConsistentParse[E, A, B]", "member" : "purity.ConsistentFunctions.pure", "link" : "purity\/ConsistentParse$.html#pure[E,A,B](b:B):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/ConsistentParse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/ConsistentParse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/ConsistentParse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/ConsistentParse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/ConsistentParse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/ConsistentParse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/ConsistentParse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/ConsistentParse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/ConsistentParse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/ConsistentParse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/ConsistentParse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/ConsistentParse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/ConsistentParse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/ConsistentParse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/ConsistentParse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/ConsistentParse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "||", "tail" : "(q: Proposition[E, B]): ConsistentParse[E, A, B]", "member" : "purity.ConsistentParse.||", "link" : "purity\/ConsistentParse.html#||(q:purity.Proposition[E,B]):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "&&", "tail" : "(q: Proposition[E, B]): ConsistentParse[E, A, B]", "member" : "purity.ConsistentParse.&&", "link" : "purity\/ConsistentParse.html#&&(q:purity.Proposition[E,B]):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "not", "tail" : "(e: E): ConsistentParse[E, A, B]", "member" : "purity.ConsistentParse.not", "link" : "purity\/ConsistentParse.html#not(e:E):purity.ConsistentParse[E,A,B]", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (C) ⇒ A)(g: (B) ⇒ D): ConsistentParse[E, C, D]", "member" : "purity.ConsistentParse.dimap", "link" : "purity\/ConsistentParse.html#dimap[C,D](f:C=>A)(g:B=>D):purity.ConsistentParse[E,C,D]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (C) ⇒ A): ConsistentParse[E, C, B]", "member" : "purity.ConsistentParse.contramap", "link" : "purity\/ConsistentParse.html#contramap[C](f:C=>A):purity.ConsistentParse[E,C,B]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (E) ⇒ E2): ConsistentParse[E2, A, B]", "member" : "purity.ConsistentParse.leftMap", "link" : "purity\/ConsistentParse.html#leftMap[E2](f:E=>E2):purity.ConsistentParse[E2,A,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) ⇒ ConsistentParse[E, A, C]): ConsistentParse[E, A, C]", "member" : "purity.ConsistentParse.flatMap", "link" : "purity\/ConsistentParse.html#flatMap[C](f:B=>purity.ConsistentParse[E,A,C]):purity.ConsistentParse[E,A,C]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) ⇒ C): ConsistentParse[E, A, C]", "member" : "purity.ConsistentParse.map", "link" : "purity\/ConsistentParse.html#map[C](f:B=>C):purity.ConsistentParse[E,A,C]", "kind" : "def"}, {"label" : "run", "tail" : "(a: A): ValidatedNel[E, B]", "member" : "purity.ConsistentParse.run", "link" : "purity\/ConsistentParse.html#run(a:A):cats.data.ValidatedNel[E,B]", "kind" : "def"}, {"member" : "purity.ConsistentParse#<init>", "error" : "unsupported entity"}, {"label" : "parsing", "tail" : ": (A) ⇒ ValidatedNel[E, B]", "member" : "purity.ConsistentParse.parsing", "link" : "purity\/ConsistentParse.html#parsing:A=>cats.data.ValidatedNel[E,B]", "kind" : "val"}, {"label" : "p", "tail" : ": Proposition[E, B]", "member" : "purity.ConsistentParse.p", "link" : "purity\/ConsistentParse.html#p:purity.Proposition[E,B]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/ConsistentParse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/ConsistentParse.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/ConsistentParse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/ConsistentParse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/ConsistentParse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/ConsistentParse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/ConsistentParse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/ConsistentParse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/ConsistentParse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/ConsistentParse.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/ConsistentParse.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/ConsistentParse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/ConsistentParse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/ConsistentParse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "purity\/ConsistentParse.html", "kind" : "case class"}, {"name" : "purity.Proposition", "shortDescription" : "A data type for lazy consistency checks on a data structure.", "object" : "purity\/Proposition$.html", "members_object" : [{"label" : "contravariantCartesianOr", "tail" : "(): Contravariant[[β$3$]Proposition[E, β$3$]]", "member" : "purity.PropositionInstances.contravariantCartesianOr", "link" : "purity\/Proposition$.html#contravariantCartesianOr[E]:cats.Contravariant[[β$3$]purity.Proposition[E,β$3$]]", "kind" : "def"}, {"label" : "contravariantCartesianAnd", "tail" : "(): Contravariant[[β$1$]Proposition[E, β$1$]]", "member" : "purity.PropositionInstances.contravariantCartesianAnd", "link" : "purity\/Proposition$.html#contravariantCartesianAnd[E]:cats.Contravariant[[β$1$]purity.Proposition[E,β$1$]]", "kind" : "def"}, {"label" : "stdContravariantCartesian", "tail" : "(): Contravariant[[β$0$]Proposition[E, β$0$]]", "member" : "purity.PropositionInstances.stdContravariantCartesian", "link" : "purity\/Proposition$.html#stdContravariantCartesian[E]:cats.Contravariant[[β$0$]purity.Proposition[E,β$0$]]", "kind" : "implicit def"}, {"label" : "thatIsFalse", "tail" : "(e: E): Proposition[E, A]", "member" : "purity.PropositionFunctions.thatIsFalse", "link" : "purity\/Proposition$.html#thatIsFalse[E,A](e:E):purity.Proposition[E,A]", "kind" : "def"}, {"label" : "thatIsTrue", "tail" : "(): Proposition[E, A]", "member" : "purity.PropositionFunctions.thatIsTrue", "link" : "purity\/Proposition$.html#thatIsTrue[E,A]:purity.Proposition[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/Proposition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/Proposition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/Proposition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/Proposition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/Proposition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/Proposition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/Proposition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/Proposition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/Proposition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/Proposition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/Proposition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/Proposition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/Proposition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/Proposition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/Proposition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/Proposition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "purity.Proposition.toString", "link" : "purity\/Proposition.html#toString():String", "kind" : "def"}, {"label" : "script", "tail" : "(dsl: ScriptDSL[F])(a: A)(ev: MonadError[F, Throwable]): ScriptT[F, Any, NonEmptyList[E], Unit]", "member" : "purity.Proposition.script", "link" : "purity\/Proposition.html#script[F[+_],E2](dsl:purity.script.ScriptDSL[F])(a:A)(implicitev:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,Any,cats.data.NonEmptyList[E],Unit]", "kind" : "def"}, {"label" : "||", "tail" : "(g: Proposition[EE, AA]): Proposition[EE, AA]", "member" : "purity.Proposition.||", "link" : "purity\/Proposition.html#||[EE>:E,AA<:A](g:purity.Proposition[EE,AA]):purity.Proposition[EE,AA]", "kind" : "def"}, {"label" : "&&", "tail" : "(g: Proposition[EE, AA]): Proposition[EE, AA]", "member" : "purity.Proposition.&&", "link" : "purity\/Proposition.html#&&[EE>:E,AA<:A](g:purity.Proposition[EE,AA]):purity.Proposition[EE,AA]", "kind" : "def"}, {"label" : "not", "tail" : "(e: EE): Proposition[EE, A]", "member" : "purity.Proposition.not", "link" : "purity\/Proposition.html#not[EE>:E](e:EE):purity.Proposition[EE,A]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (E) ⇒ E2): Proposition[E2, A]", "member" : "purity.Proposition.leftMap", "link" : "purity\/Proposition.html#leftMap[E2](f:E=>E2):purity.Proposition[E2,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Proposition[E, B]", "member" : "purity.Proposition.contramap", "link" : "purity\/Proposition.html#contramap[B](f:B=>A):purity.Proposition[E,B]", "kind" : "def"}, {"member" : "purity.Proposition#<init>", "error" : "unsupported entity"}, {"label" : "check", "tail" : ": (A) ⇒ Truth[E]", "member" : "purity.Proposition.check", "link" : "purity\/Proposition.html#check:A=>purity.Truth[E]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/Proposition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/Proposition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/Proposition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/Proposition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/Proposition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/Proposition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/Proposition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Proposition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/Proposition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/Proposition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/Proposition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/Proposition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/Proposition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/Proposition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "purity\/Proposition.html", "kind" : "case class"}, {"name" : "purity.Truth", "members_trait" : [{"label" : "counterExamplesSet", "tail" : "(): Set[EE]", "member" : "purity.Truth.counterExamplesSet", "link" : "purity\/Truth.html#counterExamplesSet[EE>:E]:Set[EE]", "kind" : "def"}, {"label" : "fold", "tail" : "(ifFalse: (NonEmptyList[E]) ⇒ A)(ifTrue: ⇒ A): A", "member" : "purity.Truth.fold", "link" : "purity\/Truth.html#fold[A](ifFalse:cats.data.NonEmptyList[E]=>A)(ifTrue:=>A):A", "kind" : "def"}, {"label" : "ifWhenFalse", "tail" : "(f: (NonEmptyList[E]) ⇒ Boolean): Boolean", "member" : "purity.Truth.ifWhenFalse", "link" : "purity\/Truth.html#ifWhenFalse(f:cats.data.NonEmptyList[E]=>Boolean):Boolean", "kind" : "def"}, {"label" : "||", "tail" : "(q: Truth[EE]): Truth[EE]", "member" : "purity.Truth.||", "link" : "purity\/Truth.html#||[EE>:E](q:purity.Truth[EE]):purity.Truth[EE]", "kind" : "def"}, {"label" : "&&", "tail" : "(q: Truth[EE]): Truth[EE]", "member" : "purity.Truth.&&", "link" : "purity\/Truth.html#&&[EE>:E](q:purity.Truth[EE]):purity.Truth[EE]", "kind" : "def"}, {"label" : "not", "tail" : "(e: EE): Truth[EE]", "member" : "purity.Truth.not", "link" : "purity\/Truth.html#not[EE>:E](e:EE):purity.Truth[EE]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (E) ⇒ B): Truth[B]", "member" : "purity.Truth.map", "link" : "purity\/Truth.html#map[B](f:E=>B):purity.Truth[B]", "kind" : "def"}, {"label" : "isFalse", "tail" : "(): Boolean", "member" : "purity.Truth.isFalse", "link" : "purity\/Truth.html#isFalse:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/Truth.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/Truth.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/Truth.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/Truth.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/Truth.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/Truth.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/Truth.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/Truth.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/Truth.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/Truth.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/Truth.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/Truth.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/Truth.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/Truth.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/Truth.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/Truth.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "counterExamples", "tail" : "(): NonEmptyList[E]", "member" : "purity.Truth.counterExamples", "link" : "purity\/Truth.html#counterExamples:cats.data.NonEmptyList[E]", "kind" : "abstract def"}, {"label" : "isTrue", "tail" : "(): Boolean", "member" : "purity.Truth.isTrue", "link" : "purity\/Truth.html#isTrue:Boolean", "kind" : "abstract def"}], "shortDescription" : "Coproduct that represents a logical truth.", "object" : "purity\/Truth$.html", "members_object" : [{"label" : "False", "tail" : "", "member" : "purity.Truth.False", "link" : "purity\/Truth$.html#False", "kind" : "object"}, {"label" : "False", "tail" : "", "member" : "purity.Truth.False", "link" : "purity\/Truth$.html#False[E]extendsTruth[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "True", "tail" : "", "member" : "purity.Truth.True", "link" : "purity\/Truth$.html#True", "kind" : "object"}, {"label" : "orSemigroupForProposition", "tail" : "(): SemigroupK[Truth]", "member" : "purity.TruthInstances.orSemigroupForProposition", "link" : "purity\/Truth$.html#orSemigroupForProposition:cats.SemigroupK[purity.Truth]", "kind" : "def"}, {"label" : "stdMonoidForProposition", "tail" : "(): MonoidK[Truth]", "member" : "purity.TruthInstances.stdMonoidForProposition", "link" : "purity\/Truth$.html#stdMonoidForProposition:cats.MonoidK[purity.Truth]", "kind" : "implicit def"}, {"label" : "stdFunctorForProposition", "tail" : "(): Functor[Truth]", "member" : "purity.TruthInstances.stdFunctorForProposition", "link" : "purity\/Truth$.html#stdFunctorForProposition:cats.Functor[purity.Truth]", "kind" : "implicit def"}, {"label" : "isFalse", "tail" : "(e: E): Truth[E]", "member" : "purity.TruthFunctions.isFalse", "link" : "purity\/Truth$.html#isFalse[E](e:E):purity.Truth[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/Truth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/Truth$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/Truth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/Truth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/Truth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/Truth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/Truth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/Truth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/Truth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/Truth$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/Truth$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/Truth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/Truth$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/Truth$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/Truth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/Truth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/Truth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "purity\/Truth.html", "kind" : "trait"}], "purity.logging" : [{"name" : "purity.logging.ColorPrint", "shortDescription" : "", "object" : "purity\/logging\/ColorPrint$.html", "members_object" : [{"label" : "apply", "tail" : "(level: LogLevel): LoggerFunction", "member" : "purity.logging.ColorPrint.apply", "link" : "purity\/logging\/ColorPrint$.html#apply(level:purity.logging.LogLevel):purity.logging.LoggerFunction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/ColorPrint$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/ColorPrint$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/ColorPrint$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/ColorPrint$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/ColorPrint$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/ColorPrint$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/ColorPrint$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/ColorPrint$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/ColorPrint$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/ColorPrint$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/ColorPrint$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/ColorPrint$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/logging\/ColorPrint$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/ColorPrint$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/logging\/ColorPrint$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/logging\/ColorPrint$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/ColorPrint$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/ColorPrint$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/ColorPrint$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "purity.logging.LoggerFunction", "shortDescription" : "", "members_case class" : [{"label" : "warn", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.warn", "link" : "purity\/logging\/LoggerFunction.html#warn(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.warn", "link" : "purity\/logging\/LoggerFunction.html#warn(e:Throwable):Unit", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.warn", "link" : "purity\/logging\/LoggerFunction.html#warn(message:String):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.trace", "link" : "purity\/logging\/LoggerFunction.html#trace(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.trace", "link" : "purity\/logging\/LoggerFunction.html#trace(e:Throwable):Unit", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.trace", "link" : "purity\/logging\/LoggerFunction.html#trace(message:String):Unit", "kind" : "def"}, {"label" : "off", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.off", "link" : "purity\/logging\/LoggerFunction.html#off(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "off", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.off", "link" : "purity\/logging\/LoggerFunction.html#off(e:Throwable):Unit", "kind" : "def"}, {"label" : "off", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.off", "link" : "purity\/logging\/LoggerFunction.html#off(message:String):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.info", "link" : "purity\/logging\/LoggerFunction.html#info(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.info", "link" : "purity\/logging\/LoggerFunction.html#info(e:Throwable):Unit", "kind" : "def"}, {"label" : "info", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.info", "link" : "purity\/logging\/LoggerFunction.html#info(message:String):Unit", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.fatal", "link" : "purity\/logging\/LoggerFunction.html#fatal(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "fatal", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.fatal", "link" : "purity\/logging\/LoggerFunction.html#fatal(e:Throwable):Unit", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.fatal", "link" : "purity\/logging\/LoggerFunction.html#fatal(message:String):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.error", "link" : "purity\/logging\/LoggerFunction.html#error(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.error", "link" : "purity\/logging\/LoggerFunction.html#error(e:Throwable):Unit", "kind" : "def"}, {"label" : "error", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.error", "link" : "purity\/logging\/LoggerFunction.html#error(message:String):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String, e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.debug", "link" : "purity\/logging\/LoggerFunction.html#debug(message:String,e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(e: Throwable): Unit", "member" : "purity.logging.LoggerFunction.debug", "link" : "purity\/logging\/LoggerFunction.html#debug(e:Throwable):Unit", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String): Unit", "member" : "purity.logging.LoggerFunction.debug", "link" : "purity\/logging\/LoggerFunction.html#debug(message:String):Unit", "kind" : "def"}, {"label" : "log", "tail" : "(line: LogLine): Unit", "member" : "purity.logging.LoggerFunction.log", "link" : "purity\/logging\/LoggerFunction.html#log(line:purity.logging.LogLine):Unit", "kind" : "def"}, {"member" : "purity.logging.LoggerFunction#<init>", "error" : "unsupported entity"}, {"label" : "level", "tail" : ": LogLevel", "member" : "purity.logging.LoggerFunction.level", "link" : "purity\/logging\/LoggerFunction.html#level:purity.logging.LogLevel", "kind" : "val"}, {"label" : "f", "tail" : ": (LogLine) ⇒ Unit", "member" : "purity.logging.LoggerFunction.f", "link" : "purity\/logging\/LoggerFunction.html#f:purity.logging.LogLine=>Unit", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/LoggerFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/LoggerFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/LoggerFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/LoggerFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/LoggerFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/LoggerFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/LoggerFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LoggerFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LoggerFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LoggerFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/LoggerFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/LoggerFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/LoggerFunction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/LoggerFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/LoggerFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/LoggerFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "purity\/logging\/LoggerFunction.html", "kind" : "case class"}, {"name" : "purity.logging.LogLevel", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/LogLevel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/LogLevel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/LogLevel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/LogLevel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/LogLevel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/LogLevel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/LogLevel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/LogLevel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/LogLevel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/logging\/LogLevel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/LogLevel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/logging\/LogLevel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/logging\/LogLevel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/LogLevel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/LogLevel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/LogLevel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "purity\/logging\/LogLevel$.html", "members_object" : [{"label" : "logLevelOrder", "tail" : ": Order[LogLevel]", "member" : "purity.logging.LogLevel.logLevelOrder", "link" : "purity\/logging\/LogLevel$.html#logLevelOrder:cats.Order[purity.logging.LogLevel]", "kind" : "implicit val"}, {"label" : "logLevelOrdering", "tail" : ": Ordering[LogLevel]", "member" : "purity.logging.LogLevel.logLevelOrdering", "link" : "purity\/logging\/LogLevel$.html#logLevelOrdering:Ordering[purity.logging.LogLevel]", "kind" : "implicit val"}, {"label" : "WarnLevel", "tail" : "", "member" : "purity.logging.LogLevel.WarnLevel", "link" : "purity\/logging\/LogLevel$.html#WarnLevel", "kind" : "object"}, {"label" : "TraceLevel", "tail" : "", "member" : "purity.logging.LogLevel.TraceLevel", "link" : "purity\/logging\/LogLevel$.html#TraceLevel", "kind" : "object"}, {"label" : "OffLevel", "tail" : "", "member" : "purity.logging.LogLevel.OffLevel", "link" : "purity\/logging\/LogLevel$.html#OffLevel", "kind" : "object"}, {"label" : "InfoLevel", "tail" : "", "member" : "purity.logging.LogLevel.InfoLevel", "link" : "purity\/logging\/LogLevel$.html#InfoLevel", "kind" : "object"}, {"label" : "FatalLevel", "tail" : "", "member" : "purity.logging.LogLevel.FatalLevel", "link" : "purity\/logging\/LogLevel$.html#FatalLevel", "kind" : "object"}, {"label" : "ErrorLevel", "tail" : "", "member" : "purity.logging.LogLevel.ErrorLevel", "link" : "purity\/logging\/LogLevel$.html#ErrorLevel", "kind" : "object"}, {"label" : "DebugLevel", "tail" : "", "member" : "purity.logging.LogLevel.DebugLevel", "link" : "purity\/logging\/LogLevel$.html#DebugLevel", "kind" : "object"}, {"label" : "AllLevel", "tail" : "", "member" : "purity.logging.LogLevel.AllLevel", "link" : "purity\/logging\/LogLevel$.html#AllLevel", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/LogLevel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/LogLevel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/LogLevel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/LogLevel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/LogLevel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/LogLevel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/LogLevel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLevel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/LogLevel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/LogLevel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/logging\/LogLevel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/LogLevel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/logging\/LogLevel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/logging\/LogLevel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/LogLevel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/LogLevel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/LogLevel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "purity\/logging\/LogLevel.html", "kind" : "trait"}, {"name" : "purity.logging.LogLine", "shortDescription" : "", "object" : "purity\/logging\/LogLine$.html", "members_class" : [{"label" : "error", "tail" : ": Option[Throwable]", "member" : "purity.logging.LogLine.error", "link" : "purity\/logging\/LogLine.html#error:Option[Throwable]", "kind" : "val"}, {"label" : "level", "tail" : ": LogLevel", "member" : "purity.logging.LogLine.level", "link" : "purity\/logging\/LogLine.html#level:purity.logging.LogLevel", "kind" : "val"}, {"label" : "line", "tail" : ": String", "member" : "purity.logging.LogLine.line", "link" : "purity\/logging\/LogLine.html#line:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/LogLine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/LogLine.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/LogLine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/LogLine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/LogLine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/LogLine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/LogLine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/LogLine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/LogLine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/logging\/LogLine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/LogLine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/logging\/LogLine.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/logging\/LogLine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/LogLine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/LogLine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/LogLine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "logLineOrdering", "tail" : ": Ordering[LogLine]", "member" : "purity.logging.LogLine.logLineOrdering", "link" : "purity\/logging\/LogLine$.html#logLineOrdering:Ordering[purity.logging.LogLine]", "kind" : "implicit val"}, {"label" : "logLineOrder", "tail" : ": Order[LogLine]", "member" : "purity.logging.LogLine.logLineOrder", "link" : "purity\/logging\/LogLine$.html#logLineOrder:cats.Order[purity.logging.LogLine]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(message: String, logLevel: LogLevel, e: Option[Throwable]): LogLine", "member" : "purity.logging.LogLine.apply", "link" : "purity\/logging\/LogLine$.html#apply(message:String,logLevel:purity.logging.LogLevel,e:Option[Throwable]):purity.logging.LogLine", "kind" : "def"}, {"label" : "Warn", "tail" : "", "member" : "purity.logging.LogLine.Warn", "link" : "purity\/logging\/LogLine$.html#WarnextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Trace", "tail" : "", "member" : "purity.logging.LogLine.Trace", "link" : "purity\/logging\/LogLine$.html#TraceextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Off", "tail" : "", "member" : "purity.logging.LogLine.Off", "link" : "purity\/logging\/LogLine$.html#OffextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Info", "tail" : "", "member" : "purity.logging.LogLine.Info", "link" : "purity\/logging\/LogLine$.html#InfoextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Fatal", "tail" : "", "member" : "purity.logging.LogLine.Fatal", "link" : "purity\/logging\/LogLine$.html#FatalextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "purity.logging.LogLine.Error", "link" : "purity\/logging\/LogLine$.html#ErrorextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "Debug", "tail" : "", "member" : "purity.logging.LogLine.Debug", "link" : "purity\/logging\/LogLine$.html#DebugextendsLogLinewithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/logging\/LogLine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/logging\/LogLine$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/logging\/LogLine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/logging\/LogLine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/logging\/LogLine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/logging\/LogLine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/logging\/LogLine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/logging\/LogLine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/logging\/LogLine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/logging\/LogLine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/logging\/LogLine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/logging\/LogLine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/logging\/LogLine$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/logging\/LogLine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/logging\/LogLine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/logging\/LogLine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/logging\/LogLine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "purity\/logging\/LogLine.html", "kind" : "class"}], "purity.script" : [{"name" : "purity.script.future", "shortDescription" : "", "object" : "purity\/script\/future$.html", "members_object" : [{"label" : "logError", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (Throwable) ⇒ LogLine)(M: MonadError[Future, Throwable]): ScriptT[Future, D, E, A]", "member" : "purity.script.ScriptDSL.logError", "link" : "purity\/script\/future$.html#logError[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:Throwable=>purity.logging.LogLine)(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "logFailure", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (E) ⇒ LogLine)(M: Functor[Future]): ScriptT[Future, D, E, A]", "member" : "purity.script.ScriptDSL.logFailure", "link" : "purity\/script\/future$.html#logFailure[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.logging.LogLine)(implicitM:cats.Functor[F]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/future$.html#warn(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/future$.html#warn(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/future$.html#warn(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/future$.html#trace(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/future$.html#trace(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/future$.html#trace(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/future$.html#off(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/future$.html#off(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/future$.html#off(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/future$.html#info(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/future$.html#info(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/future$.html#info(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/future$.html#fatal(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/future$.html#fatal(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/future$.html#fatal(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/future$.html#error(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/future$.html#error(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/future$.html#error(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String, e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/future$.html#debug(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(e: Throwable)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/future$.html#debug(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/future$.html#debug(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "log", "tail" : "(logLine: LogLine)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.log", "link" : "purity\/script\/future$.html#log(logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "dependencies", "tail" : "(F: Applicative[Future]): ScriptT[Future, D, Nothing, D]", "member" : "purity.script.ScriptDSL.dependencies", "link" : "purity\/script\/future$.html#dependencies[D](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,D,Nothing,D]", "kind" : "def"}, {"label" : "runF", "tail" : "(sa: ScriptT[Future, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ Future[B], onSuccess: (A) ⇒ Future[B])(M: MonadError[Future, Throwable]): Future[B]", "member" : "purity.script.ScriptDSL.runF", "link" : "purity\/script\/future$.html#runF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "foldF", "tail" : "(sa: ScriptT[Future, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ Future[B], onSuccess: (A) ⇒ Future[B])(M: MonadError[Future, Throwable]): Future[B]", "member" : "purity.script.ScriptDSL.foldF", "link" : "purity\/script\/future$.html#foldF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "run", "tail" : "(sa: ScriptT[Future, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[Future, Throwable]): Future[B]", "member" : "purity.script.ScriptDSL.run", "link" : "purity\/script\/future$.html#run[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "fold", "tail" : "(sa: ScriptT[Future, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[Future, Throwable]): Future[B]", "member" : "purity.script.ScriptDSL.fold", "link" : "purity\/script\/future$.html#fold[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "scriptE", "tail" : "(fae: Future[Either[E, A]])(F: Functor[Future]): ScriptT[Future, Any, E, A]", "member" : "purity.script.ScriptDSL.scriptE", "link" : "purity\/script\/future$.html#scriptE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "script", "tail" : "(sa: Future[A])(F: Functor[Future]): ScriptT[Future, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.script", "link" : "purity\/script\/future$.html#script[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "liftFE", "tail" : "(fae: Future[Either[E, A]])(F: Functor[Future]): ScriptT[Future, Any, E, A]", "member" : "purity.script.ScriptDSL.liftFE", "link" : "purity\/script\/future$.html#liftFE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(sa: Future[A])(F: Functor[Future]): ScriptT[Future, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.liftF", "link" : "purity\/script\/future$.html#liftF[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "ok", "tail" : "(F: Applicative[Future]): ScriptT[Future, Any, E, Unit]", "member" : "purity.script.ScriptDSL.ok", "link" : "purity\/script\/future$.html#ok[E](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Unit]", "kind" : "def"}, {"label" : "start", "tail" : "(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.start", "link" : "purity\/script\/future$.html#start(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "unit", "tail" : "(F: Applicative[Future]): ScriptT[Future, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.unit", "link" : "purity\/script\/future$.html#unit(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "inject", "tail" : "(sa: ScriptT[Future, D, E, A])(di: (D2) ⇒ D): ScriptT[Future, D2, E, A]", "member" : "purity.script.ScriptDSL.inject", "link" : "purity\/script\/future$.html#inject[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(sa: ScriptT[Future, D, E, A])(di: (D2) ⇒ D): ScriptT[Future, D2, E, A]", "member" : "purity.script.ScriptDSL.contramap", "link" : "purity\/script\/future$.html#contramap[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "mapFailure", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (E) ⇒ E2)(F: Functor[Future]): ScriptT[Future, D, E2, A]", "member" : "purity.script.ScriptDSL.mapFailure", "link" : "purity\/script\/future$.html#mapFailure[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (E) ⇒ E2)(F: Functor[Future]): ScriptT[Future, D, E2, A]", "member" : "purity.script.ScriptDSL.leftMap", "link" : "purity\/script\/future$.html#leftMap[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (E) ⇒ ScriptT[Future, D, E2, A])(M: Monad[Future]): ScriptT[Future, D, E2, A]", "member" : "purity.script.ScriptDSL.recover", "link" : "purity\/script\/future$.html#recover[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (E) ⇒ ScriptT[Future, D, E2, A])(M: Monad[Future]): ScriptT[Future, D, E2, A]", "member" : "purity.script.ScriptDSL.handleErrorWith", "link" : "purity\/script\/future$.html#handleErrorWith[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "find", "tail" : "(opt: Either[E, A])(F: Applicative[Future]): ScriptT[Future, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/future$.html#find[E,A](opt:Either[E,A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "find", "tail" : "(e: ⇒ E)(opt: Option[A])(F: Applicative[Future]): ScriptT[Future, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/future$.html#find[E,A](e:=>E)(opt:Option[A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E, logLine: LogLine)(F: Applicative[Future]): ScriptT[Future, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/future$.html#fail[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E)(F: Applicative[Future]): ScriptT[Future, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/future$.html#fail[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E, logLine: LogLine)(F: Applicative[Future]): ScriptT[Future, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/future$.html#raiseError[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E)(F: Applicative[Future]): ScriptT[Future, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/future$.html#raiseError[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (A) ⇒ ScriptT[Future, D, E, B])(M: MonadError[Future, Throwable]): ScriptT[Future, D, E, B]", "member" : "purity.script.ScriptDSL.flatMap", "link" : "purity\/script\/future$.html#flatMap[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>purity.script.ScriptT[F,D,E,B])(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A)(F: Applicative[Future]): ScriptT[Future, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.pure", "link" : "purity\/script\/future$.html#pure[A](a:A)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "map", "tail" : "(sa: ScriptT[Future, D, E, A])(f: (A) ⇒ B)(F: Functor[Future]): ScriptT[Future, D, E, B]", "member" : "purity.script.ScriptDSL.map", "link" : "purity\/script\/future$.html#map[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>B)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "Script", "tail" : "", "member" : "purity.script.ScriptDSL.Script", "link" : "purity\/script\/future$.html#Script[-D,+E,+A]=purity.script.ScriptT[F,D,E,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/script\/future$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/script\/future$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/script\/future$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/script\/future$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/script\/future$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/script\/future$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/script\/future$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/future$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/future$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/future$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/script\/future$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/script\/future$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/script\/future$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/script\/future$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/script\/future$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/script\/future$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/script\/future$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/script\/future$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/script\/future$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "purity.script.io", "shortDescription" : "", "object" : "purity\/script\/io$.html", "members_object" : [{"label" : "logError", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (Throwable) ⇒ LogLine)(M: MonadError[IO, Throwable]): ScriptT[IO, D, E, A]", "member" : "purity.script.ScriptDSL.logError", "link" : "purity\/script\/io$.html#logError[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:Throwable=>purity.logging.LogLine)(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "logFailure", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (E) ⇒ LogLine)(M: Functor[IO]): ScriptT[IO, D, E, A]", "member" : "purity.script.ScriptDSL.logFailure", "link" : "purity\/script\/io$.html#logFailure[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.logging.LogLine)(implicitM:cats.Functor[F]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/io$.html#warn(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/io$.html#warn(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/io$.html#warn(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/io$.html#trace(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/io$.html#trace(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/io$.html#trace(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/io$.html#off(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/io$.html#off(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/io$.html#off(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/io$.html#info(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/io$.html#info(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/io$.html#info(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/io$.html#fatal(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/io$.html#fatal(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/io$.html#fatal(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/io$.html#error(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/io$.html#error(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/io$.html#error(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String, e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/io$.html#debug(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(e: Throwable)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/io$.html#debug(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/io$.html#debug(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "log", "tail" : "(logLine: LogLine)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.log", "link" : "purity\/script\/io$.html#log(logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "dependencies", "tail" : "(F: Applicative[IO]): ScriptT[IO, D, Nothing, D]", "member" : "purity.script.ScriptDSL.dependencies", "link" : "purity\/script\/io$.html#dependencies[D](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,D,Nothing,D]", "kind" : "def"}, {"label" : "runF", "tail" : "(sa: ScriptT[IO, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ IO[B], onSuccess: (A) ⇒ IO[B])(M: MonadError[IO, Throwable]): IO[B]", "member" : "purity.script.ScriptDSL.runF", "link" : "purity\/script\/io$.html#runF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "foldF", "tail" : "(sa: ScriptT[IO, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ IO[B], onSuccess: (A) ⇒ IO[B])(M: MonadError[IO, Throwable]): IO[B]", "member" : "purity.script.ScriptDSL.foldF", "link" : "purity\/script\/io$.html#foldF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "run", "tail" : "(sa: ScriptT[IO, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[IO, Throwable]): IO[B]", "member" : "purity.script.ScriptDSL.run", "link" : "purity\/script\/io$.html#run[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "fold", "tail" : "(sa: ScriptT[IO, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[IO, Throwable]): IO[B]", "member" : "purity.script.ScriptDSL.fold", "link" : "purity\/script\/io$.html#fold[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "scriptE", "tail" : "(fae: IO[Either[E, A]])(F: Functor[IO]): ScriptT[IO, Any, E, A]", "member" : "purity.script.ScriptDSL.scriptE", "link" : "purity\/script\/io$.html#scriptE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "script", "tail" : "(sa: IO[A])(F: Functor[IO]): ScriptT[IO, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.script", "link" : "purity\/script\/io$.html#script[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "liftFE", "tail" : "(fae: IO[Either[E, A]])(F: Functor[IO]): ScriptT[IO, Any, E, A]", "member" : "purity.script.ScriptDSL.liftFE", "link" : "purity\/script\/io$.html#liftFE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(sa: IO[A])(F: Functor[IO]): ScriptT[IO, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.liftF", "link" : "purity\/script\/io$.html#liftF[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "ok", "tail" : "(F: Applicative[IO]): ScriptT[IO, Any, E, Unit]", "member" : "purity.script.ScriptDSL.ok", "link" : "purity\/script\/io$.html#ok[E](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Unit]", "kind" : "def"}, {"label" : "start", "tail" : "(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.start", "link" : "purity\/script\/io$.html#start(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "unit", "tail" : "(F: Applicative[IO]): ScriptT[IO, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.unit", "link" : "purity\/script\/io$.html#unit(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "inject", "tail" : "(sa: ScriptT[IO, D, E, A])(di: (D2) ⇒ D): ScriptT[IO, D2, E, A]", "member" : "purity.script.ScriptDSL.inject", "link" : "purity\/script\/io$.html#inject[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(sa: ScriptT[IO, D, E, A])(di: (D2) ⇒ D): ScriptT[IO, D2, E, A]", "member" : "purity.script.ScriptDSL.contramap", "link" : "purity\/script\/io$.html#contramap[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "mapFailure", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (E) ⇒ E2)(F: Functor[IO]): ScriptT[IO, D, E2, A]", "member" : "purity.script.ScriptDSL.mapFailure", "link" : "purity\/script\/io$.html#mapFailure[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (E) ⇒ E2)(F: Functor[IO]): ScriptT[IO, D, E2, A]", "member" : "purity.script.ScriptDSL.leftMap", "link" : "purity\/script\/io$.html#leftMap[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (E) ⇒ ScriptT[IO, D, E2, A])(M: Monad[IO]): ScriptT[IO, D, E2, A]", "member" : "purity.script.ScriptDSL.recover", "link" : "purity\/script\/io$.html#recover[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (E) ⇒ ScriptT[IO, D, E2, A])(M: Monad[IO]): ScriptT[IO, D, E2, A]", "member" : "purity.script.ScriptDSL.handleErrorWith", "link" : "purity\/script\/io$.html#handleErrorWith[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "find", "tail" : "(opt: Either[E, A])(F: Applicative[IO]): ScriptT[IO, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/io$.html#find[E,A](opt:Either[E,A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "find", "tail" : "(e: ⇒ E)(opt: Option[A])(F: Applicative[IO]): ScriptT[IO, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/io$.html#find[E,A](e:=>E)(opt:Option[A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E, logLine: LogLine)(F: Applicative[IO]): ScriptT[IO, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/io$.html#fail[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E)(F: Applicative[IO]): ScriptT[IO, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/io$.html#fail[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E, logLine: LogLine)(F: Applicative[IO]): ScriptT[IO, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/io$.html#raiseError[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E)(F: Applicative[IO]): ScriptT[IO, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/io$.html#raiseError[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (A) ⇒ ScriptT[IO, D, E, B])(M: MonadError[IO, Throwable]): ScriptT[IO, D, E, B]", "member" : "purity.script.ScriptDSL.flatMap", "link" : "purity\/script\/io$.html#flatMap[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>purity.script.ScriptT[F,D,E,B])(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A)(F: Applicative[IO]): ScriptT[IO, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.pure", "link" : "purity\/script\/io$.html#pure[A](a:A)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "map", "tail" : "(sa: ScriptT[IO, D, E, A])(f: (A) ⇒ B)(F: Functor[IO]): ScriptT[IO, D, E, B]", "member" : "purity.script.ScriptDSL.map", "link" : "purity\/script\/io$.html#map[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>B)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "Script", "tail" : "", "member" : "purity.script.ScriptDSL.Script", "link" : "purity\/script\/io$.html#Script[-D,+E,+A]=purity.script.ScriptT[F,D,E,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/script\/io$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/script\/io$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/script\/io$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/script\/io$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/script\/io$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/script\/io$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/script\/io$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/io$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/io$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/io$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/script\/io$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/script\/io$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/script\/io$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/script\/io$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/script\/io$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/script\/io$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/script\/io$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/script\/io$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/script\/io$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "purity.script.ScriptDSL", "members_trait" : [{"label" : "logError", "tail" : "(sa: ScriptT[F, D, E, A])(f: (Throwable) ⇒ LogLine)(M: MonadError[F, Throwable]): ScriptT[F, D, E, A]", "member" : "purity.script.ScriptDSL.logError", "link" : "purity\/script\/ScriptDSL.html#logError[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:Throwable=>purity.logging.LogLine)(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "logFailure", "tail" : "(sa: ScriptT[F, D, E, A])(f: (E) ⇒ LogLine)(M: Functor[F]): ScriptT[F, D, E, A]", "member" : "purity.script.ScriptDSL.logFailure", "link" : "purity\/script\/ScriptDSL.html#logFailure[D,E,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.logging.LogLine)(implicitM:cats.Functor[F]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/ScriptDSL.html#warn(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/ScriptDSL.html#warn(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "warn", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.warn", "link" : "purity\/script\/ScriptDSL.html#warn(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/ScriptDSL.html#trace(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/ScriptDSL.html#trace(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "trace", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.trace", "link" : "purity\/script\/ScriptDSL.html#trace(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/ScriptDSL.html#off(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/ScriptDSL.html#off(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "off", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.off", "link" : "purity\/script\/ScriptDSL.html#off(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/ScriptDSL.html#info(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/ScriptDSL.html#info(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "info", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.info", "link" : "purity\/script\/ScriptDSL.html#info(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/ScriptDSL.html#fatal(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/ScriptDSL.html#fatal(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "fatal", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.fatal", "link" : "purity\/script\/ScriptDSL.html#fatal(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/ScriptDSL.html#error(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/ScriptDSL.html#error(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "error", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.error", "link" : "purity\/script\/ScriptDSL.html#error(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String, e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/ScriptDSL.html#debug(message:String,e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(e: Throwable)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/ScriptDSL.html#debug(e:Throwable)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "debug", "tail" : "(message: String)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.debug", "link" : "purity\/script\/ScriptDSL.html#debug(message:String)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "log", "tail" : "(logLine: LogLine)(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.log", "link" : "purity\/script\/ScriptDSL.html#log(logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "dependencies", "tail" : "(F: Applicative[F]): ScriptT[F, D, Nothing, D]", "member" : "purity.script.ScriptDSL.dependencies", "link" : "purity\/script\/ScriptDSL.html#dependencies[D](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,D,Nothing,D]", "kind" : "def"}, {"label" : "runF", "tail" : "(sa: ScriptT[F, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ F[B], onSuccess: (A) ⇒ F[B])(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptDSL.runF", "link" : "purity\/script\/ScriptDSL.html#runF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "foldF", "tail" : "(sa: ScriptT[F, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ F[B], onSuccess: (A) ⇒ F[B])(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptDSL.foldF", "link" : "purity\/script\/ScriptDSL.html#foldF[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "run", "tail" : "(sa: ScriptT[F, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptDSL.run", "link" : "purity\/script\/ScriptDSL.html#run[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "fold", "tail" : "(sa: ScriptT[F, D, E, A])(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptDSL.fold", "link" : "purity\/script\/ScriptDSL.html#fold[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "scriptE", "tail" : "(fae: F[Either[E, A]])(F: Functor[F]): ScriptT[F, Any, E, A]", "member" : "purity.script.ScriptDSL.scriptE", "link" : "purity\/script\/ScriptDSL.html#scriptE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "script", "tail" : "(sa: F[A])(F: Functor[F]): ScriptT[F, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.script", "link" : "purity\/script\/ScriptDSL.html#script[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "liftFE", "tail" : "(fae: F[Either[E, A]])(F: Functor[F]): ScriptT[F, Any, E, A]", "member" : "purity.script.ScriptDSL.liftFE", "link" : "purity\/script\/ScriptDSL.html#liftFE[E,A](fae:F[Either[E,A]])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "liftF", "tail" : "(sa: F[A])(F: Functor[F]): ScriptT[F, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.liftF", "link" : "purity\/script\/ScriptDSL.html#liftF[A](sa:F[A])(implicitF:cats.Functor[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "ok", "tail" : "(F: Applicative[F]): ScriptT[F, Any, E, Unit]", "member" : "purity.script.ScriptDSL.ok", "link" : "purity\/script\/ScriptDSL.html#ok[E](implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Unit]", "kind" : "def"}, {"label" : "start", "tail" : "(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.start", "link" : "purity\/script\/ScriptDSL.html#start(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "unit", "tail" : "(F: Applicative[F]): ScriptT[F, Any, Nothing, Unit]", "member" : "purity.script.ScriptDSL.unit", "link" : "purity\/script\/ScriptDSL.html#unit(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "inject", "tail" : "(sa: ScriptT[F, D, E, A])(di: (D2) ⇒ D): ScriptT[F, D2, E, A]", "member" : "purity.script.ScriptDSL.inject", "link" : "purity\/script\/ScriptDSL.html#inject[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(sa: ScriptT[F, D, E, A])(di: (D2) ⇒ D): ScriptT[F, D2, E, A]", "member" : "purity.script.ScriptDSL.contramap", "link" : "purity\/script\/ScriptDSL.html#contramap[D2,D,E,A](sa:purity.script.ScriptT[F,D,E,A])(di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "mapFailure", "tail" : "(sa: ScriptT[F, D, E, A])(f: (E) ⇒ E2)(F: Functor[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptDSL.mapFailure", "link" : "purity\/script\/ScriptDSL.html#mapFailure[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(sa: ScriptT[F, D, E, A])(f: (E) ⇒ E2)(F: Functor[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptDSL.leftMap", "link" : "purity\/script\/ScriptDSL.html#leftMap[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(sa: ScriptT[F, D, E, A])(f: (E) ⇒ ScriptT[F, D, E2, A])(M: Monad[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptDSL.recover", "link" : "purity\/script\/ScriptDSL.html#recover[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(sa: ScriptT[F, D, E, A])(f: (E) ⇒ ScriptT[F, D, E2, A])(M: Monad[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptDSL.handleErrorWith", "link" : "purity\/script\/ScriptDSL.html#handleErrorWith[E,E2,D,A](sa:purity.script.ScriptT[F,D,E,A])(f:E=>purity.script.ScriptT[F,D,E2,A])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "find", "tail" : "(opt: Either[E, A])(F: Applicative[F]): ScriptT[F, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/ScriptDSL.html#find[E,A](opt:Either[E,A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "find", "tail" : "(e: ⇒ E)(opt: Option[A])(F: Applicative[F]): ScriptT[F, Any, E, A]", "member" : "purity.script.ScriptDSL.find", "link" : "purity\/script\/ScriptDSL.html#find[E,A](e:=>E)(opt:Option[A])(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,A]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E, logLine: LogLine)(F: Applicative[F]): ScriptT[F, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/ScriptDSL.html#fail[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E)(F: Applicative[F]): ScriptT[F, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.fail", "link" : "purity\/script\/ScriptDSL.html#fail[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E, logLine: LogLine)(F: Applicative[F]): ScriptT[F, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/ScriptDSL.html#raiseError[E](e:E,logLine:purity.logging.LogLine)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E)(F: Applicative[F]): ScriptT[F, Any, E, Nothing]", "member" : "purity.script.ScriptDSL.raiseError", "link" : "purity\/script\/ScriptDSL.html#raiseError[E](e:E)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,E,Nothing]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(sa: ScriptT[F, D, E, A])(f: (A) ⇒ ScriptT[F, D, E, B])(M: MonadError[F, Throwable]): ScriptT[F, D, E, B]", "member" : "purity.script.ScriptDSL.flatMap", "link" : "purity\/script\/ScriptDSL.html#flatMap[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>purity.script.ScriptT[F,D,E,B])(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A)(F: Applicative[F]): ScriptT[F, Any, Nothing, A]", "member" : "purity.script.ScriptDSL.pure", "link" : "purity\/script\/ScriptDSL.html#pure[A](a:A)(implicitF:cats.Applicative[F]):purity.script.ScriptT[F,Any,Nothing,A]", "kind" : "def"}, {"label" : "map", "tail" : "(sa: ScriptT[F, D, E, A])(f: (A) ⇒ B)(F: Functor[F]): ScriptT[F, D, E, B]", "member" : "purity.script.ScriptDSL.map", "link" : "purity\/script\/ScriptDSL.html#map[A,B,D,E](sa:purity.script.ScriptT[F,D,E,A])(f:A=>B)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"label" : "Script", "tail" : "", "member" : "purity.script.ScriptDSL.Script", "link" : "purity\/script\/ScriptDSL.html#Script[-D,+E,+A]=purity.script.ScriptT[F,D,E,A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/script\/ScriptDSL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/script\/ScriptDSL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/script\/ScriptDSL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/script\/ScriptDSL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/script\/ScriptDSL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/script\/ScriptDSL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/script\/ScriptDSL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptDSL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptDSL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptDSL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/script\/ScriptDSL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/script\/ScriptDSL.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/script\/ScriptDSL.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/script\/ScriptDSL.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/script\/ScriptDSL.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/script\/ScriptDSL.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/script\/ScriptDSL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/script\/ScriptDSL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/script\/ScriptDSL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "purity\/script\/ScriptDSL.html", "kind" : "trait"}, {"name" : "purity.script.ScriptT", "shortDescription" : "This represents a program with dependencies D, domain failures E, and which produces an A, while side effects shouldbe handled by F.", "object" : "purity\/script\/ScriptT$.html", "members_object" : [{"label" : "Definition", "tail" : "", "member" : "purity.script.ScriptT.Definition", "link" : "purity\/script\/ScriptT$.html#Definition[F[+_],-D,+E,+A]=D=>F[(List[purity.logging.LogLine],Either[E,A])]", "kind" : "type"}, {"label" : "stdMonadErrorForScript", "tail" : "(M: MonadError[F, Throwable]): MonadError[[δ$2$]ScriptT[F, D, E, δ$2$], E]", "member" : "purity.script.ScriptTInstances.stdMonadErrorForScript", "link" : "purity\/script\/ScriptT$.html#stdMonadErrorForScript[F[+_],D,E](implicitM:cats.MonadError[F,Throwable]):cats.MonadError[[δ$2$]purity.script.ScriptT[F,D,E,δ$2$],E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/script\/ScriptT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/script\/ScriptT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/script\/ScriptT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/script\/ScriptT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/script\/ScriptT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/script\/ScriptT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/script\/ScriptT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/script\/ScriptT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/script\/ScriptT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "purity\/script\/ScriptT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/script\/ScriptT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "purity\/script\/ScriptT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "purity\/script\/ScriptT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/script\/ScriptT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/script\/ScriptT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/script\/ScriptT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "runF", "tail" : "(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ F[B], onSuccess: (A) ⇒ F[B])(F: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptT.runF", "link" : "purity\/script\/ScriptT.html#runF[B](dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitF:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "foldF", "tail" : "(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ F[B], onSuccess: (A) ⇒ F[B])(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptT.foldF", "link" : "purity\/script\/ScriptT.html#foldF[B](dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>F[B],onSuccess:A=>F[B])(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "run", "tail" : "(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(F: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptT.run", "link" : "purity\/script\/ScriptT.html#run[B](dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitF:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "fold", "tail" : "(dependencies: D, logger: LoggerFunction, onFailure: (E) ⇒ B, onSuccess: (A) ⇒ B)(M: MonadError[F, Throwable]): F[B]", "member" : "purity.script.ScriptT.fold", "link" : "purity\/script\/ScriptT.html#fold[B](dependencies:D,logger:purity.logging.LoggerFunction,onFailure:E=>B,onSuccess:A=>B)(implicitM:cats.MonadError[F,Throwable]):F[B]", "kind" : "def"}, {"label" : "logError", "tail" : "(f: (Throwable) ⇒ LogLine)(M: MonadError[F, Throwable]): ScriptT[F, D, E, A]", "member" : "purity.script.ScriptT.logError", "link" : "purity\/script\/ScriptT.html#logError(f:Throwable=>purity.logging.LogLine)(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "logFailure", "tail" : "(f: (E) ⇒ LogLine)(M: Functor[F]): ScriptT[F, D, E, A]", "member" : "purity.script.ScriptT.logFailure", "link" : "purity\/script\/ScriptT.html#logFailure(f:E=>purity.logging.LogLine)(implicitM:cats.Functor[F]):purity.script.ScriptT[F,D,E,A]", "kind" : "def"}, {"label" : "inject", "tail" : "(di: (D2) ⇒ D): ScriptT[F, D2, E, A]", "member" : "purity.script.ScriptT.inject", "link" : "purity\/script\/ScriptT.html#inject[D2](di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(di: (D2) ⇒ D): ScriptT[F, D2, E, A]", "member" : "purity.script.ScriptT.contramap", "link" : "purity\/script\/ScriptT.html#contramap[D2](di:D2=>D):purity.script.ScriptT[F,D2,E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(f: (E) ⇒ ScriptT[F, DD, E2, AA])(M: Monad[F]): ScriptT[F, DD, E2, AA]", "member" : "purity.script.ScriptT.recover", "link" : "purity\/script\/ScriptT.html#recover[E2,DD<:D,AA>:A](f:E=>purity.script.ScriptT[F,DD,E2,AA])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,DD,E2,AA]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (E) ⇒ ScriptT[F, DD, E2, AA])(M: Monad[F]): ScriptT[F, DD, E2, AA]", "member" : "purity.script.ScriptT.handleErrorWith", "link" : "purity\/script\/ScriptT.html#handleErrorWith[E2,DD<:D,AA>:A](f:E=>purity.script.ScriptT[F,DD,E2,AA])(implicitM:cats.Monad[F]):purity.script.ScriptT[F,DD,E2,AA]", "kind" : "def"}, {"label" : "mapFailure", "tail" : "(f: (E) ⇒ E2)(F: Functor[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptT.mapFailure", "link" : "purity\/script\/ScriptT.html#mapFailure[E2](f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (E) ⇒ E2)(F: Functor[F]): ScriptT[F, D, E2, A]", "member" : "purity.script.ScriptT.leftMap", "link" : "purity\/script\/ScriptT.html#leftMap[E2](f:E=>E2)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E2,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ ScriptT[F, DD, EE, B])(M: MonadError[F, Throwable]): ScriptT[F, DD, EE, B]", "member" : "purity.script.ScriptT.flatMap", "link" : "purity\/script\/ScriptT.html#flatMap[B,DD<:D,EE>:E](f:A=>purity.script.ScriptT[F,DD,EE,B])(implicitM:cats.MonadError[F,Throwable]):purity.script.ScriptT[F,DD,EE,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B)(F: Functor[F]): ScriptT[F, D, E, B]", "member" : "purity.script.ScriptT.map", "link" : "purity\/script\/ScriptT.html#map[B](f:A=>B)(implicitF:cats.Functor[F]):purity.script.ScriptT[F,D,E,B]", "kind" : "def"}, {"member" : "purity.script.ScriptT#<init>", "error" : "unsupported entity"}, {"label" : "definition", "tail" : ": Definition[F, D, E, A]", "member" : "purity.script.ScriptT.definition", "link" : "purity\/script\/ScriptT.html#definition:purity.script.ScriptT.Definition[F,D,E,A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "purity\/script\/ScriptT.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "purity\/script\/ScriptT.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "purity\/script\/ScriptT.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "purity\/script\/ScriptT.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "purity\/script\/ScriptT.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "purity\/script\/ScriptT.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "purity\/script\/ScriptT.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "purity\/script\/ScriptT.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "purity\/script\/ScriptT.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "purity\/script\/ScriptT.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "purity\/script\/ScriptT.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "purity\/script\/ScriptT.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "purity\/script\/ScriptT.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "purity\/script\/ScriptT.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "purity\/script\/ScriptT.html", "kind" : "case class"}]};